{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* 프로젝트의 증분 컴파일을 위해 .tsbuildinfo 파일을 저장합니다. ////Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* 프로젝트 참조와 함께 TypeScript 프로젝트를 사용할 수 있는 제약 조건을 활성화합니다. ////Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* .tsbuildinfo 증분 컴파일 파일의 경로를 지정합니다. ////Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 복합 프로젝트(composite projects)를 참조할 때 선언 파일 대신 소스 파일을 우선하는 것을 비활성화합니다. ////Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* 편집 시 다중 프로젝트 참조 검사에서 프로젝트를 제외합니다. ////Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* TypeScript가 자동으로 로드하는 프로젝트 수를 줄입니다. ////Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es2016",                                  /* 발행된 JavaScript의 JavaScript 언어 버전을 설정하고 호환되는 라이브러리 선언을 포함합니다. S////et the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                        /* 대상 실행 환경을 설명하는 번들 라이브러리 선언 파일 세트를 지정합니다. ////Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* 생성되는 JSX 코드를 지정합니다. ////Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* 레거시 실험적인 데코레이터의 실험적인 지원을 활성화합니다. ////Enable experimental support for legacy experimental decorators. */
    // "emitDecoratorMetadata": true,                    /* 소스 파일의 데코레이트된 선언에 대한 디자인 타입 메타데이터를 발행합니다. ////Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* React JSX 출력을 대상으로 사용되는 JSX 팩토리 함수를 지정하십시오. 예: 'React.createElement' 또는 'h'. ////Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* React JSX 출력을 대상으로 사용되는 프래그먼트의 JSX 프래그먼트 참조를 지정하십시오. 예: 'React.Fragment' 또는 'Fragment'. ////Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* 'jsx: react-jsx*'를 사용할 때 JSX 팩토리 함수를 가져오는 데 사용되는 모듈 지정자를 지정하십시오. ////Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* 'react' JSX 출력을 대상으로 할 때 'createElement'에 대해 호출되는 객체를 지정하십시오. ////Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* 기본 lib.d.ts를 포함하여 모든 라이브러리 파일을 비활성화하십시오. ////Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* ECMAScript 표준 호환 클래스 필드를 발행하십시오. ////Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* 모듈 형식 JS 파일을 감지하는 데 사용되는 메서드를 제어하십시오. ////Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "commonjs",                                /* 생성되는 모듈 코드를 지정하십시오. ////Specify what module code is generated. */
    // "rootDir": "./",                                  /* 소스 파일 내의 루트 폴더를 지정하십시오. ////Specify the root folder within your source files. */
    // "moduleResolution": "node10",                     /* TypeScript가 주어진 모듈 지정자에서 파일을 찾는 방법을 지정하십시오. ////Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* 비상대적 모듈 이름을 해결하기 위한 기본 디렉터리를 지정하십시오. ////Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* 추가 조회 위치로 가져오기를 다시 매핑하는 일련의 항목을 지정하십시오. ////Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* 모듈 해결 시 여러 폴더를 하나로 처리할 수 있도록 허용하십시오. ////Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* './node_modules/@types'와 같은 역할을 하는 여러 폴더를 지정하십시오. ////Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* 소스 파일에서 참조되지 않고 포함되어야 하는 유형 패키지 이름을 지정하십시오. ////Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* 모듈에서 UMD 글로벌에 액세스할 수 있도록 허용하십시오. ////Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* 모듈 해결 시 검색할 파일 이름 접미사 목록을 지정하십시오. ////List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,               /* import에 TypeScript 파일 확장자를 포함할 수 있도록 허용하십시오. '--moduleResolution bundler' 및 '--noEmit' 또는 '--emitDeclarationOnly'가 설정되어야 합니다. ////Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "resolvePackageJsonExports": true,                /* 패키지 가져오기를 해결할 때 package.json의 'exports' 필드를 사용하십시오. ////Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,                /* 가져오기를 해결할 때 package.json의 'imports' 필드를 사용하십시오. ////Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                           /* 가져오기를 해결할 때 resolver-specific 기본값 외에 추가로 설정할 조건을 지정하십시오. ////Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    // "resolveJsonModule": true,                        /* .json 파일을 가져오기 허용하십시오. ////Enable importing .json files. */
    // "allowArbitraryExtensions": true,                 /* 선언 파일이 있는 경우 어떤 확장자의 파일도 가져오기 허용하십시오. ////Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* 'import', 'require' 또는 '<reference>'가 TypeScript가 프로젝트에 추가해야 하는 파일 수를 증가시키지 않도록 금지하십시오. ////Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* 프로그램의 일부로 JavaScript 파일을 허용하십시오. 이러한 파일에서 오류를 얻으려면 'checkJS' 옵션을 사용하십시오. ////Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                                  /* 유형 확인된 JavaScript 파일에서 오류 보고를 활성화하십시오. ////Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* 'node_modules'에서 JavaScript 파일을 확인하는 데 사용되는 최대 폴더 깊이를 지정하십시오. 'allowJs'와 함께 사용 가능합니다. ////Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* 프로젝트의 TypeScript 및 JavaScript 파일에서 .d.ts 파일을 생성하십시오. ////Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* d.ts 파일에 대한 소스맵을 생성하십시오. ////Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* JavaScript 파일 대신에 d.ts 파일만 출력하십시오. ////Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* 생성된 JavaScript 파일에 대한 소스맵 파일을 생성하십시오. ////Create source map files for emitted JavaScript files. */
    // "inlineSourceMap": true,                          /* 생성된 JavaScript 내에 소스맵 파일을 포함하십시오. ////Include sourcemap files inside the emitted JavaScript. */
    // "outFile": "./",                                  /* 모든 출력을 하나의 JavaScript 파일로 번들링하는 파일을 지정하십시오. 'declaration'이 true인 경우 모든 .d.ts 출력을 번들링하는 파일도 지정합니다. ////Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    "outDir": "./dist",                                  /* 모든 생성된 파일을 위한 출력 폴더를 지정하십시오. ////Specify an output folder for all emitted files. */
    // "removeComments": true,                           /* 주석을 생성하지 않도록 비활성화하십시오. ////Disable emitting comments. */
    // "noEmit": true,                                   /* 컴파일에서 파일을 생성하지 않도록 비활성화하십시오. ////Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* 프로젝트 당 한 번만 tslib에서 도우미 함수를 가져올 수 있도록 허용하십시오. 파일당 포함하는 것이 아닌 프로젝트 전체에서 가져옵니다. ////Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* 유형에만 사용되는 가져오기에 대한 생성/확인 동작을 지정하십시오. ////Specify emit/checking behavior for imports that are only used for types. */
    // "downlevelIteration": true,                       /* 더 준수하지만 상대적으로 긴 설명이 포함되고 성능이 떨어지는 반복에 대한 JavaScript를 생성하십시오. ////Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* 디버거가 참조 소스 코드를 찾을 수 있는 루트 경로를 지정하십시오. ////Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* 생성된 위치 대신 디버거가 맵 파일을 찾아야 할 위치를 지정하십시오. ////Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* 생성된 JavaScript 내의 소스 코드를 소스맵에 포함하십시오. ////Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* 출력 파일의 시작 부분에 UTF-8 Byte Order Mark (BOM)을 포함하도록 설정하십시오. ////Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* 파일을 생성할 때 사용할 줄 바꿈 문자를 지정하십시오. ////Set the newline character for emitting files. */
    // "stripInternal": true,                            /* JSDoc 주석에 '@internal'이 포함된 선언을 생성하지 않도록 비활성화하십시오. ////Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* '__extends'와 같은 사용자 지정 도우미 함수를 컴파일된 출력에서 생성하지 않도록 비활성화하십시오. ////Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* 모든 유형 확인 오류가 보고된 경우 파일 생성을 비활성화하십시오. ////Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* 생성된 코드에서 'const enum' 선언을 지우지 않도록 비활성화하십시오. ////Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* 생성된 선언 파일의 출력 디렉터리를 지정하십시오. ////Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* JavaScript 출력에서 제거될 수 있는 사용되지 않는 가져온 값들을 보존하십시오. ////Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* 다른 가져오기에 의존하지 않고 각 파일을 안전하게 변환할 수 있도록 보장하십시오. ////Ensure that each file can be safely transpiled without relying on other imports. */
    // "verbatimModuleSyntax": true,                     /* 유형만 있는 것으로 표시되지 않은 가져오기 또는 내보내기를 변환하거나 삭제하지 않고, 'module' 설정에 따라 출력 파일의 형식으로 작성되도록 보장하십시오. ////Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "allowSyntheticDefaultImports": true,             /* 모듈에 기본 내보내기가 없는 경우 'import x from y'를 허용하십시오. ////Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* CommonJS 모듈을 가져오기 쉽게 하기 위해 추가 JavaScript를 생성하십시오. 이로 인해 유형 호환성을 위해 'allowSyntheticDefaultImports'가 활성화됩니다. ////Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    // "preserveSymlinks": true,                         /* 심볼릭 링크를 실제 경로로 해석하지 않도록 비활성화하십시오. 이는 node의 동일한 플래그와 관련이 있습니다. ////Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* 가져오기에서 대소문자를 올바르게 보장하십시오. ////Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* 모든 엄격한 유형 검사 옵션을 활성화하십시오. ////Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* 암시적으로 'any' 유형을 갖는 표현식과 선언에 대한 오류 보고를 활성화하십시오. ////Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* 유형 확인 시 'null'과 'undefined'를 고려하십시오. ////When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* 함수를 할당할 때 매개변수와 반환 값이 하위 유형 호환성을 갖는지 확인하십시오. ////When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* 'bind', 'call', 'apply' 메서드의 인수가 원래 함수와 일치하는지 확인하십시오. ////Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* 생성자에서 선언되지만 설정되지 않은 클래스 속성을 확인하십시오. ////Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* 'this'에 'any' 유형이 지정된 경우 오류 보고를 활성화하십시오. ////Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* 기본적으로 catch 절 변수를 'unknown'으로 설정하십시오. 'any' 대신. ////Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* 항상 'use strict'를 출력하도록 보장하십시오. ////Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* 로컬 변수가 읽히지 않을 때 오류 보고를 활성화하십시오. ////Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* 함수 매개변수가 읽히지 않을 때 오류를 발생하십시오. ////Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* 선택적 속성 유형을 'undefined'를 추가하지 않고 작성된대로 해석하십시오. ////Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* 함수 내에서 명시적으로 반환되지 않은 코드 경로에 대한 오류 보고를 활성화하십시오. ////Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* switch 문에서 fallthrough 케이스에 대한 오류 보고를 활성화하십시오. ////Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* 인덱스를 사용하여 액세스할 때 유형에 'undefined'를 추가하십시오. ////Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* 파생 클래스에서 재정의된 멤버가 override 수정자로 표시되도록 보장하십시오. ////Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* 인덱스 유형을 사용하여 선언된 키에 대한 액세서 사용을 강제화하십시오. ////Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* 사용되지 않는 라벨에 대한 오류 보고를 비활성화하십시오. ////Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* 도달할 수 없는 코드에 대한 오류 보고를 비활성화하십시오. ////Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* TypeScript와 함께 포함된 .d.ts 파일의 유형 검사를 건너뛰십시오. ////Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* 모든 .d.ts 파일의 유형 검사를 건너뛰십시오. ////Skip type checking all .d.ts files. */
  },
  "include": [
    "src/**/*.ts",
    "src/**/*.json",
    ".env"
  ],
  // 컴파일에서 제외되는 파일들
  "exclude": [
    "node_modules",
    "**/*.spec.ts",
    "logs"
  ]
}
